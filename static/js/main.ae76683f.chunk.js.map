{"version":3,"sources":["client.js","Character/Card.js","Character/Episodes.js","Character/Detail.js","Character/List.js","Filter/Search.js","Filter/index.js","App.js","reportWebVitals.js","index.js"],"names":["SEARCH_TYPES","searchTypeVar","makeVar","dimensionCharactersVar","locationCharactersVar","episodeCharactersVar","charactersVar","client","ApolloClient","uri","cache","InMemoryCache","Meta","Card","Character","styled","List","Item","CharacterCard","id","name","image","location","origin","species","status","onSelect","hoverable","style","width","cover","alt","src","onClick","title","description","dimension","Episode","episode","EpisodeList","episodes","map","key","GET_CHARACTER_BY_ID","gql","CharactersBody","Row","CharactersData","character","xs","md","PropertyTitle","level","label","value","gender","EmptyMessage","div","Chat","Typography","Paragraph","Message","Text","Title","PropertyText","PropertyLabel","CharacterProperty","code","CharacterDetail","onClose","useQuery","variables","skip","loading","error","data","visible","centered","onOk","onCancel","footer","justify","wrap","indicator","LoadingOutlined","fontSize","spin","GET_CHARACTERS_BY_IDS","CharactersRow","FilterColumn","Col","CharacterList","useState","characterDetailId","setCharacterDetail","type","useReactiveVar","charactersIds","length","ids","characters","charactersByIds","Detail","GET_LOCATIONS","GET_DIMENSIONS","GET_EPISODES","Option","Select","SearchInput","byUnique","acc","curr","find","item","push","DimentionPicker","QUERY_MAP","STATUS_MAP","query","refetch","setValue","useEffect","search","handleSearch","options","locations","results","result","reduce","selected","residents","forEach","add","Set","onSearch","onChange","onClear","showSearch","placeholder","defaultActiveFirstOption","allowClear","showArrow","filterOption","notFoundContent","d","FilterRow","Filter","align","span","sm","offset","Group","e","target","defaultValue","Button","Search","AppWrapper","AppHeader","header","AppBody","App","data-testid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae76683f.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, makeVar } from '@apollo/client'\n\nexport const SEARCH_TYPES = {\n  DIMENSION: 'dimension',\n  LOCATION: 'location',\n  EPISODE: 'episode'\n}\n\nexport const searchTypeVar = makeVar(SEARCH_TYPES.DIMENSION)\n\nconst dimensionCharactersVar = makeVar([])\nconst locationCharactersVar = makeVar([])\nconst episodeCharactersVar = makeVar([])\n\nexport const charactersVar = {\n  [SEARCH_TYPES.DIMENSION]: dimensionCharactersVar,\n  [SEARCH_TYPES.LOCATION]: locationCharactersVar,\n  [SEARCH_TYPES.EPISODE]: episodeCharactersVar\n}\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql/',\n  cache: new InMemoryCache()\n})\n\nexport default client\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { List, Card } from 'antd'\n\nconst { Meta } = Card\n\nconst Character = styled(List.Item)`\n  min-width: 250px;\n  margin: 16px;\n`\n\nconst CharacterCard = ({ id, name, image, origin, location, species, status, onSelect }) => {\n  return (\n    <Character>\n      <Card\n        hoverable\n        style={{ width: 240 }}\n        cover={<img alt={name} src={image} />}\n        onClick={() => onSelect(id)}\n      >\n        <Meta\n          title={name}\n          description={`${location.dimension} ${species} ${status}`}\n        />\n      </Card>\n    </Character>\n  )\n}\n\nexport default CharacterCard\n","const Episode = ({ episode, name }) => (\n  <p>\n    {episode} {name}\n  </p>\n)\n\nconst EpisodeList = ({ episodes }) => {\n  return (\n    <div>\n      {episodes.map(episode => (\n        <Episode key={episode.key} {...episode} />\n      ))}\n    </div>\n  )\n}\n\nexport default EpisodeList\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport styled from 'styled-components'\nimport { Row, Button, Col, Modal, Spin, Typography } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport EpisodeList from './Episodes'\n\nexport const GET_CHARACTER_BY_ID = gql`\n  query getOneCharacter($id: ID!) {\n    character(id: $id){\n      id\n      name\n      status\n      species\n      type\n      gender\n      origin {\n        id\n        name\n        type\n        dimension\n        created\n      }\n      location {\n        id\n        name\n        type\n        dimension\n        created\n      }\n      image\n      episode {\n        id\n        name\n        air_date\n        episode\n        created\n      }\n      created\n    }\n  }\n`\n\nconst CharactersBody = styled(Row)`\n  min-height: 50vh;\n  min-width: 50vw;\n  overflow: hidden auto;\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n`\n\nconst CharactersData = ({ character }) => (\n  <Col>\n    <Row>\n      <Col xs={24} md={12}>\n        <img\n          alt={character?.name}\n          src={character?.image}\n        />\n      </Col>\n      <Col xs={24} md={12}>\n        <PropertyTitle level={3}>\n          {character?.name}\n        </PropertyTitle>\n        <CharacterProperty label='Species' value={character?.species} />\n        <CharacterProperty label='Gender' value={character?.gender} />\n        <CharacterProperty label='Status' value={character?.status} />\n        <Row>\n          <CharacterProperty\n            label='Origin'\n            value={character?.origin?.name}\n          />\n          <CharacterProperty\n            label='Origin Dimension'\n            value={character?.origin?.dimension || 'unknown'}\n          />\n        </Row>\n        <Row>\n          <CharacterProperty\n            label='Location'\n            value={character?.location?.name}\n          />\n          <CharacterProperty\n            label='Loc. Dimension'\n            value={character?.location?.dimension || 'unknown'}\n          />\n        </Row>\n      </Col>\n    </Row>\n    <PropertyTitle level={4}>\n      Episodes\n    </PropertyTitle>\n    <EpisodeList episodes={character?.episode || []} />\n  </Col>\n)\n\nconst EmptyMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n`\n\nconst Chat = styled(Typography.Paragraph)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 16px;\n`\n\nconst Message = styled(Typography.Text)`\n  color: white;\n  font-size: 16px;\n`\n\nconst PropertyTitle = styled(Typography.Title)`\n  margin: 8px 0;\n`\n\nconst PropertyText = styled(Typography.Text)`\n  min-width: 120px;\n  display: inline-block;\n  text-align: left;\n  padding-right: 4px;\n`\n\nconst PropertyLabel = styled(PropertyText)`\n  min-width: 80px;\n`\n\nconst CharacterProperty = ({ label, value }) => (\n  <Typography.Paragraph>\n    <PropertyLabel>\n      {label}\n    </PropertyLabel>\n    <PropertyText code>\n      {value}\n    </PropertyText>\n  </Typography.Paragraph>\n)\n\nconst CharacterDetail = ({ id, onClose }) => {\n  const { loading, error, data } = useQuery(\n    GET_CHARACTER_BY_ID,\n    {\n      variables: { id },\n      skip: !id\n    }\n  )\n\n  return (\n    <Modal\n      visible={id}\n      centered\n      width='90%'\n      onOk={() => onClose(false)}\n      onCancel={() => onClose(false)}\n      footer={[\n        <Button key='back' onClick={onClose}>\n          Close\n        </Button>\n      ]}\n    >\n      <CharactersBody\n        justify='center'\n        wrap\n      >\n        {!loading && !error && (\n          <CharactersData character={data?.character} />\n        )}\n        {loading && (<Spin indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />} />)}\n        {error && (\n          <EmptyMessage>\n            <img\n              width={200}\n              alt='OH geez oh man'\n              src='/OH_geez_oh_man.png'\n            />\n            <Chat>\n              <Message code>Something went horribly wrong, please try again?</Message>\n            </Chat>\n          </EmptyMessage>\n        )}\n      </CharactersBody>\n    </Modal>\n  )\n}\n\nexport default CharacterDetail\n","import React, { useState } from 'react'\nimport { useQuery, gql, useReactiveVar } from '@apollo/client'\nimport styled from 'styled-components'\nimport { Row, Col, Spin, Typography } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n\nimport { searchTypeVar, charactersVar } from '../client'\nimport CharacterCard from './Card'\nimport Detail from './Detail'\n\nexport const GET_CHARACTERS_BY_IDS = gql`\n  query charactersByIds($ids: [ID!]!) {\n    charactersByIds(ids: $ids){\n      id\n      name\n      status\n      species\n      type\n      gender\n      origin{\n        id\n        name\n        type\n        dimension\n        created\n      }\n      location{\n        id\n        name\n        type\n        dimension\n        created\n      }\n      image\n    }\n  }\n`\n\nconst CharactersRow = styled(Row)`\n  max-height: calc(100vh - 120px);\n  height: calc(100vh - 120px);\n  width: 100%;\n  overflow: hidden auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst FilterColumn = styled(Col)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst EmptyMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n`\n\nconst Chat = styled(Typography.Paragraph)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 16px;\n`\n\nconst Message = styled(Typography.Text)`\n  color: white;\n  font-size: 16px;\n`\n\nconst CharacterList = () => {\n  const [characterDetailId, setCharacterDetail] = useState(null)\n\n  const type = useReactiveVar(searchTypeVar)\n  const charactersIds = useReactiveVar(charactersVar[type])\n  const skip = !charactersIds.length\n\n  const { loading, error, data } = useQuery(\n    GET_CHARACTERS_BY_IDS,\n    {\n      variables: { ids: charactersIds },\n      skip\n    }\n  )\n\n  const characters = !loading && !error ? (data?.charactersByIds || []) : []\n\n  return (\n    <CharactersRow\n      justify='center'\n      wrap\n    >\n      {loading && (<Spin indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />} />)}\n      {characters.map(character => (\n        <FilterColumn key={character.id}>\n          <CharacterCard {...character} onSelect={setCharacterDetail} />\n        </FilterColumn>\n      ))}\n      {skip && (\n        <EmptyMessage>\n          <img\n            width={200}\n            alt='ButterRobot'\n            src='/Butter_Robot.png'\n          />\n          <Chat>\n            <Message code>What is my purpose?</Message>\n            <Message>You pass butter</Message>\n            <Message>...</Message>\n            <Message code>What is my purpose?</Message>\n            <Message>You pass butter</Message>\n            <Message code>Oh my god...</Message>\n            <Message>Yeah, welcome to the club, pal</Message>\n          </Chat>\n        </EmptyMessage>\n      )}\n      {error && (\n        <EmptyMessage>\n          <img\n            width={200}\n            alt='OH geez oh man'\n            src='/OH_geez_oh_man.png'\n          />\n          <Chat>\n            <Message code>Something went horribly wrong, please try again?</Message>\n          </Chat>\n        </EmptyMessage>\n      )}\n      <Detail\n        id={characterDetailId}\n        onClose={() => setCharacterDetail(false)}\n      >\n        <p>some contents...</p>\n        <p>some contents...</p>\n        <p>some contents...</p>\n      </Detail>\n    </CharactersRow>\n  )\n}\n\nexport default CharacterList\n","import React, { useEffect, useState } from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { Select } from 'antd'\nimport styled from 'styled-components'\n\nimport {\n  SEARCH_TYPES\n} from '../client'\n\nconst GET_LOCATIONS = gql`\n  query locations($search: String) {\n    locations(page: 1, filter: {name: $search}) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        name\n        residents {\n          id\n        }\n      }\n    }\n  }\n`\n\nconst GET_DIMENSIONS = gql`\n  query dimensions($search: String) {\n    locations(page: 1, filter: {dimension: $search}) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        dimension\n        residents {\n          id\n        }\n      }\n    }\n  }\n`\n\nconst GET_EPISODES = gql`\n  query episodes($search: String) {\n    episodes(page: 1, filter: {name: $search}) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        name\n        characters {\n          id\n        }\n      }\n    }\n  }\n`\n\nconst { Option } = Select\n\nconst SearchInput = styled(Select)`\n  width: 100%;\n  margin: 16px;\n`\n\nconst byUnique = (acc, curr) => {\n  if (!acc.find(item => item.value === curr.value)) {\n    acc.push(curr)\n  }\n  return acc\n}\n\nconst DimentionPicker = ({ type, onSelect }) => {\n  const QUERY_MAP = {\n    [SEARCH_TYPES.DIMENSION]: GET_DIMENSIONS,\n    [SEARCH_TYPES.LOCATION]: GET_LOCATIONS,\n    [SEARCH_TYPES.EPISODE]: GET_EPISODES\n  }\n\n  const STATUS_MAP = {\n    [SEARCH_TYPES.DIMENSION]: useState(''),\n    [SEARCH_TYPES.LOCATION]: useState(''),\n    [SEARCH_TYPES.EPISODE]: useState('')\n  }\n\n  const query = useQuery(QUERY_MAP[type])\n  const { refetch, loading, error, data } = query\n  const [value, setValue] = STATUS_MAP[type]\n\n  useEffect(() => {\n    query && query.refetch({ search: value })\n  }, [type])\n\n  const handleSearch = value => {\n    refetch({ search: value || '' })\n  }\n\n  const handleChange = value => {\n    setValue(value)\n  }\n\n  const handleSelect = (value) => {\n    const selected = (data?.locations?.results || data?.episodes?.results || [])\n      .reduce(\n        (acc, curr) => {\n          const name = (curr.name || curr.dimension)\n          if (value === name) {\n            const characters = (curr.characters || curr.residents)\n            characters.forEach(character => character.id && acc.add(character.id))\n          }\n          return acc\n        },\n        new Set()\n      )\n\n    onSelect([...selected])\n  }\n\n  const options = !loading &&\n     !error &&\n     (data?.locations?.results || data?.episodes?.results || [])\n       .map(result => ({\n         key: result.id,\n         value: result.name || result.dimension\n       }))\n       .reduce(byUnique, [])\n\n  return (\n    <SearchInput\n      value={value}\n      onSelect={handleSelect}\n      onSearch={handleSearch}\n      onChange={handleChange}\n      onClear={handleSearch}\n      showSearch\n      loading={loading}\n      placeholder='Search here'\n      defaultActiveFirstOption={false}\n      allowClear\n      showArrow={false}\n      filterOption={false}\n      notFoundContent={null}\n    >\n      {(options || []).map(d => <Option key={d.value}>{d.value}</Option>)}\n    </SearchInput>\n  )\n}\n\nexport default DimentionPicker\n","import React from 'react'\nimport Search from './Search'\nimport { Radio, Row, Col } from 'antd'\nimport styled from 'styled-components'\nimport { useReactiveVar } from '@apollo/client'\nimport {\n  searchTypeVar,\n  charactersVar,\n  SEARCH_TYPES\n} from '../client'\n\nconst FilterRow = styled(Row)`\n  margin: 16px;\n`\n\nconst FilterColumn = styled(Col)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Filter = () => {\n  const type = useReactiveVar(searchTypeVar)\n\n  return (\n    <FilterRow justify='center' align='center'>\n      <FilterColumn xs={{ span: 24 }} sm={{ span: 10 }} md={{ span: 8, offset: 2 }}>\n        <Radio.Group onChange={e => searchTypeVar(e.target.value)} defaultValue={type}>\n          <Radio.Button value={SEARCH_TYPES.DIMENSION}>Dimension</Radio.Button>\n          <Radio.Button value={SEARCH_TYPES.LOCATION}>Location</Radio.Button>\n          <Radio.Button value={SEARCH_TYPES.EPISODE}>Episode</Radio.Button>\n        </Radio.Group>\n      </FilterColumn>\n      <FilterColumn xs={{ span: 24 }} sm={{ span: 14 }} md={{ span: 8, offset: 0 }}>\n        <Search\n          type={type}\n          onSelect={characters => {\n            charactersVar[type](characters)\n          }}\n        />\n      </FilterColumn>\n    </FilterRow>\n  )\n}\n\nexport default Filter\n","import React from 'react'\nimport styled from 'styled-components'\nimport CharacterList from './Character/List'\nimport Filter from './Filter'\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nconst AppHeader = styled.header`\n  background-color: #FFF;\n  flex: 0 0 auto;\n  width: 100%;\n`\n\nconst AppBody = styled.div`\n  margin: 0;\n  flex: 1 0 100%;\n  color: white;\n`\n\nfunction App () {\n  return (\n    <AppWrapper>\n      <AppHeader data-testid='app-header'>\n        <Filter />\n      </AppHeader>\n      <AppBody>\n        <CharacterList />\n      </AppBody>\n    </AppWrapper>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import 'antd/dist/antd.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\nimport { ApolloProvider } from '@apollo/client'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport client from './client'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <GlobalStyle />\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}